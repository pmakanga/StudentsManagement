@page "/add-country"
@page "/country/edit/{id}"
@rendermode InteractiveServer
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation

<h3>@FormTitle</h3>
<hr />
<div class="row">
    <div class="col-md-12">
        <EditForm Model="CountryObj" OnValidSubmit="HandleSave">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Country Code</label>
                            <InputText for="Country Code" autocomplete="off" class="form-control" @bind-Value=@CountryObj.Code />
                            <ValidationMessage For="()=>CountryObj.Code" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Country Name</label>
                            <InputText for="Country Name" autocomplete="off" class="form-control" @bind-Value=@CountryObj.Name />
                            <ValidationMessage For="()=>CountryObj.Name" />
                        </div>
                    </div>
                </div>
                <div class="form-group mt-4">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <a class="btn btn-danger " href="countries-list"><i class="oi oi-plus"></i>Back</a>
                </div>

            </div>
        </EditForm>
    </div>
</div>

@code {
    public Country CountryObj { get; set; } = new();

    public string FormTitle { get; set; } = string.Empty;

    [Parameter] public string Id { get; set; } = string.Empty;

    private async Task HandleSave()
    {
        if (CountryObj.Id == Guid.Empty)
        {
            var result = await CountryService.AddCountryAsync(CountryObj);
            if (result != null)
                navigation.NavigateTo("/countries-list");
        }
        else
        {
            var results = await CountryService.UpdateCountryAsync(CountryObj);
            if (results != null)
                navigation.NavigateTo("/countries-list");
        }
    }


   
}
