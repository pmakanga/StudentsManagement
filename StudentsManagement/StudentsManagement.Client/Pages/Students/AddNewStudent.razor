@page "/add-student"
@page "/student/edit/{id}"
@rendermode InteractiveServer
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation

<h3>@FormTitle</h3>
<hr />
<div class="row">
    <div class="col-md-12">
        <EditForm Model="StudentObj" OnValidSubmit="HandleSave">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Student Number</label>
                            <InputText for="Student Number" autocomplete="off" class="form-control" @bind-Value=@StudentObj.StudentNo />
                            <ValidationMessage For="()=>StudentObj.StudentNo" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">First Name</label>
                            <InputText for ="First Name" autocomplete="off" class="form-control" @bind-Value=@StudentObj.FirstName/>
                            <ValidationMessage For="()=>StudentObj.FirstName"/>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Middle Name</label>
                            <InputText for="Middle Name" autocomplete="off" class="form-control" @bind-Value=@StudentObj.MiddleName />
                            <ValidationMessage For="()=>StudentObj.MiddleName" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Last Name</label>
                            <InputText for="Last Name" autocomplete="off" class="form-control" @bind-Value=@StudentObj.LastName />
                            <ValidationMessage For="()=>StudentObj.LastName" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Phone</label>
                            <InputText for="Phone" autocomplete="off" class="form-control" @bind-Value=@StudentObj.PhoneNumber />
                            <ValidationMessage For="()=>StudentObj.PhoneNumber" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Email</label>
                            <InputText for="Email" autocomplete="off" class="form-control" @bind-Value=@StudentObj.EmailAddress />
                            <ValidationMessage For="()=>StudentObj.EmailAddress" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Address</label>
                            <InputText for="Address" autocomplete="off" class="form-control" @bind-Value=@StudentObj.Address />
                            <ValidationMessage For="()=>StudentObj.Address" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Country</label>
                            <InputSelect for="Country" autocomplete="off" class="form-control" @bind-Value=@StudentObj.Country>
                                <option value="">Select Country</option>
                                @foreach (var country in Countries)
                                {
                                    <option value="@country.Name">@country.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="()=>StudentObj.Country" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Gender</label>
                            <InputSelect for="GenderId" class="form-control" @bind-Value="@StudentObj.Gender">
                                <option value="">Select Gender</option>
                                @if (Gender != null && Gender.Any())
                                {
                                    @foreach (var sex in Gender)
                                    {
                                        <option value="@sex.Id">@sex.Description</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="()=>StudentObj.Gender" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Date of Birth</label>
                            <InputDate for="DOB" class="form-control" @bind-Value="@StudentObj.DOB" />
                            <ValidationMessage For="()=>StudentObj.DOB" />
                        </div>
                    </div>
                </div>
                <div class="form-group mt-4">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <a class="btn btn-danger " href="students-list"><i class="oi oi-plus"></i>Back</a>
                </div>

            </div>
        </EditForm>
    </div>
</div>

@code {

    public Student StudentObj { get; set; } = new();

    [Parameter] public string Id { get; set; } = string.Empty;

    public string FormTitle { get; set; } = string.Empty;

    List<Country> Countries= new List<Country>();

    List<SystemCodeDetail> Gender = new List<SystemCodeDetail>();


    private async Task HandleSave()
    {
        if (StudentObj.Id == Guid.Empty)
        {
            var result = await StudentService.AddStudentAsync(StudentObj);
            if (result != null)
                navigation.NavigateTo("/students-list");
        }
        else
        {
            var results = await StudentService.UpdateStudentAsync(StudentObj);
            if (results != null)
                navigation.NavigateTo("/students-list");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var _Id = new Guid(Id); // hapa ni very tricky, if the conversion from string to Guid is not done it becomes a big fuckin mess!

            var student = await StudentService.GetStudentByIdAsync(_Id);
            if (student != null)
                StudentObj = student;
            FormTitle = "Edit Student";
        }
        else
        {
            FormTitle = "Add Student";
        }

    }

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryService.GetAllCountriesAsync();
        Gender = await SystemCodeDetailsService.GetSystemCodeDetailByCodeAsync("Gender");
    }

}
